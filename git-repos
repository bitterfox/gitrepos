#!/bin/sh

GITREPOS_ROOT=~/git-repos

help () {
  echo "git-repos"
  echo "  clone [url]"
  echo "    Close [url] under $GITREPOS_ROOT"
  echo "  list"
  echo "    Show all git-repos under $GITREPOS_ROOT with [domain]/[user]/[repository] format"
  echo "    Sorted by count"
  echo "  fulllist"
  echo "    Show all git-repos as fullpath"
  echo "  cd [domain]/[user]/[repository]"
  echo "    Change current directory under specified repository"
  echo "  open [domain]/[user]/[repository]"
  echo "    Open https://[domain]/[user]/[repository] in default browser"
  echo "  root"
  echo "    Print current git-repos root: $GITREPOS_ROOT"
  echo "  count"
  echo "    Increment count for sorting in list commands"
}

count() {
    domain="$1"
    user="$2"
    repo="$3"
    gitrepos_data_root="$GITREPOS_ROOT/$domain/$user/$repo/.git/gitrepos"
    mkdir -p "$gitrepos_data_root"
    if [ -f "$gitrepos_data_root/count" ]; then
        echo $((`cat $gitrepos_data_root/count` + 1)) > $gitrepos_data_root/count
    else
        echo 1 > $gitrepos_data_root/count
    fi
}

find_gitrepos_all() {
    cd $GITREPOS_ROOT
    for domain in `ls`; do
        find_gitrepos_domain "$domain"
    done
}

find_gitrepos_domain() {
    cd $GITREPOS_ROOT/$1
    for user in `ls`; do
        find_gitrepos_user "$1" "$user"
    done
}

find_gitrepos_user() {
    cd $GITREPOS_ROOT/$1/$2
    for repo in `ls`; do
        echo "$1/$2/$repo"
    done
}

find_gitrepos() {
    for dir in `find_gitrepos_all`; do
        gitrepos_data_root="$GITREPOS_ROOT/$dir/.git/gitrepos"
        if [ -f "$gitrepos_data_root/count" ]; then
            echo -n "`cat $gitrepos_data_root/count`"
        else
            echo -n "0"
        fi
        echo " $dir"
    done | sort -k 1,1nr -k 2,2 | awk '{print $2}'
}

main () {
  if [ -z ${1+x} ]; then
    help ; return
  fi

  if [ $1 = "clone" ]; then
    if [ -z ${2+x} ]; then
      help ; return
    fi

    # test SSH form
    regex=".*git@(.*):(.*)\/(.*)\.git.*"
    domain=`echo $2 | sed -E "s/$regex/\1/g"`
    if [ "$2" != "$domain" ]; then
        user=`echo $2 | sed -E "s/$regex/\2/g"`
        repo=`echo $2 | sed -E "s/$regex/\3/g"`
        dir="$GITREPOS_ROOT/$domain/$user/$repo"
        echo "Clone $2 into $dir"
    else
        # test HTTPS form
        regex=".*https:\/\/(.*)\/(.*)\/(.*)\.git.*"
        domain=`echo $2 | sed -E "s/$regex/\1/g"`
        if [ "$2" != "$domain" ]; then
            user=`echo $2 | sed -E "s/$regex/\2/g"`
            repo=`echo $2 | sed -E "s/$regex/\3/g"`
            dir="$GITREPOS_ROOT/$domain/$user/$repo"
            echo "Clone $2 into $dir"
        else
            echo "Unknown git url $2"
        fi
    fi

    git clone $2 $dir
  elif [ $1 = "list" ]; then
    find_gitrepos
  elif [ $1 = "fulllist" ]; then
    for dir in `find_gitrepos`; do
        echo "$GITREPOS_ROOT/$dir"
    done
  elif [ $1 = "cd" ]; then
    if [ -z ${2+x} ]; then
      help ; return
    fi
    regex="^(.*)\/(.*)\/(.*)"
    domain=`echo $2 | sed -E "s/$regex/\1/g"`
    user=`echo $2 | sed -E "s/$regex/\2/g"`
    repo=`echo $2 | sed -E "s/$regex/\3/g"`
    echo "Moving to $domain/$user/$repo"
    cd "$GITREPOS_ROOT/$domain/$user/$repo"
    count "$domain" "$user" "$repo"
    exec $SHELL && exit
  elif [ $1 = "open" ]; then
    if [ -z ${2+x} ]; then
      help ; return
    fi
    regex="^(.*)\/(.*)\/(.*)"
    domain=`echo $2 | sed -E "s/$regex/\1/g"`
    user=`echo $2 | sed -E "s/$regex/\2/g"`
    repo=`echo $2 | sed -E "s/$regex/\3/g"`
    url="https://$domain/$user/$repo"
    if [[ "$(uname)" == "Darwin" ]]; then
      open "$url"
    else
      xdg-open "$url"
    fi
  elif [ $1 = "count" ]; then
    regex="^(.*)\/(.*)\/(.*)"
    domain=`echo $2 | sed -E "s/$regex/\1/g"`
    user=`echo $2 | sed -E "s/$regex/\2/g"`
    repo=`echo $2 | sed -E "s/$regex/\3/g"`
    count "$domain" "$user" "$repo"
  elif [ $1 = "root" ]; then
      echo $GITREPOS_ROOT
  else
    help ; return
  fi
}

main $@
